/**
 * This class is generated by jOOQ
 */
package io.github.picodotdev.blogbitix.springboot.jooq.tables;


import io.github.picodotdev.blogbitix.springboot.jooq.Jooq;
import io.github.picodotdev.blogbitix.springboot.jooq.Keys;
import io.github.picodotdev.blogbitix.springboot.jooq.tables.records.DepartmentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Department extends TableImpl<DepartmentRecord> {

	private static final long serialVersionUID = 511847037;

	/**
	 * The reference instance of <code>JOOQ.DEPARTMENT</code>
	 */
	public static final Department DEPARTMENT = new Department();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<DepartmentRecord> getRecordType() {
		return DepartmentRecord.class;
	}

	/**
	 * The column <code>JOOQ.DEPARTMENT.ID</code>.
	 */
	public final TableField<DepartmentRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>JOOQ.DEPARTMENT.NAME</code>.
	 */
	public final TableField<DepartmentRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

	/**
	 * Create a <code>JOOQ.DEPARTMENT</code> table reference
	 */
	public Department() {
		this("DEPARTMENT", null);
	}

	/**
	 * Create an aliased <code>JOOQ.DEPARTMENT</code> table reference
	 */
	public Department(String alias) {
		this(alias, DEPARTMENT);
	}

	private Department(String alias, Table<DepartmentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Department(String alias, Table<DepartmentRecord> aliased, Field<?>[] parameters) {
		super(alias, Jooq.JOOQ, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<DepartmentRecord, Long> getIdentity() {
		return Keys.IDENTITY_DEPARTMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<DepartmentRecord> getPrimaryKey() {
		return Keys.PK_DEPARTMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<DepartmentRecord>> getKeys() {
		return Arrays.<UniqueKey<DepartmentRecord>>asList(Keys.PK_DEPARTMENT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Department as(String alias) {
		return new Department(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Department rename(String name) {
		return new Department(name, null);
	}
}
