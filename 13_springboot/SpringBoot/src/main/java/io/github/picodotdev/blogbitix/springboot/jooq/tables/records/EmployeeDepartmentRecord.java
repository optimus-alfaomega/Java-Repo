/**
 * This class is generated by jOOQ
 */
package io.github.picodotdev.blogbitix.springboot.jooq.tables.records;


import io.github.picodotdev.blogbitix.springboot.jooq.tables.EmployeeDepartment;
import io.github.picodotdev.blogbitix.springboot.jooq.tables.interfaces.IEmployeeDepartment;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeDepartmentRecord extends UpdatableRecordImpl<EmployeeDepartmentRecord> implements Record3<Long, Long, Long>, IEmployeeDepartment {

	private static final long serialVersionUID = 2110914136;

	/**
	 * Setter for <code>JOOQ.EMPLOYEE_DEPARTMENT.ID</code>.
	 */
	@Override
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>JOOQ.EMPLOYEE_DEPARTMENT.ID</code>.
	 */
	@NotNull
	@Override
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>JOOQ.EMPLOYEE_DEPARTMENT.EMPLOYEE_ID</code>.
	 */
	@Override
	public void setEmployeeId(Long value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>JOOQ.EMPLOYEE_DEPARTMENT.EMPLOYEE_ID</code>.
	 */
	@Override
	public Long getEmployeeId() {
		return (Long) getValue(1);
	}

	/**
	 * Setter for <code>JOOQ.EMPLOYEE_DEPARTMENT.DEPARTMENT_ID</code>.
	 */
	@Override
	public void setDepartmentId(Long value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>JOOQ.EMPLOYEE_DEPARTMENT.DEPARTMENT_ID</code>.
	 */
	@Override
	public Long getDepartmentId() {
		return (Long) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, Long, Long> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, Long, Long> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return EmployeeDepartment.EMPLOYEE_DEPARTMENT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return EmployeeDepartment.EMPLOYEE_DEPARTMENT.EMPLOYEE_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field3() {
		return EmployeeDepartment.EMPLOYEE_DEPARTMENT.DEPARTMENT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getEmployeeId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value3() {
		return getDepartmentId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EmployeeDepartmentRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EmployeeDepartmentRecord value2(Long value) {
		setEmployeeId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EmployeeDepartmentRecord value3(Long value) {
		setDepartmentId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EmployeeDepartmentRecord values(Long value1, Long value2, Long value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IEmployeeDepartment from) {
		setId(from.getId());
		setEmployeeId(from.getEmployeeId());
		setDepartmentId(from.getDepartmentId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IEmployeeDepartment> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached EmployeeDepartmentRecord
	 */
	public EmployeeDepartmentRecord() {
		super(EmployeeDepartment.EMPLOYEE_DEPARTMENT);
	}

	/**
	 * Create a detached, initialised EmployeeDepartmentRecord
	 */
	public EmployeeDepartmentRecord(Long id, Long employeeId, Long departmentId) {
		super(EmployeeDepartment.EMPLOYEE_DEPARTMENT);

		setValue(0, id);
		setValue(1, employeeId);
		setValue(2, departmentId);
	}
}
