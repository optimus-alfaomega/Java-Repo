plugins {
    id 'application'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

application {
    mainClassName = 'io.github.picodotdev.blogbitix.springcloud.client.Main'
    version = '1.0'
}

dependencies {
    implementation(platform('org.springframework.boot:spring-boot-dependencies:2.2.5.RELEASE'))
    implementation(platform('org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR3'))

    // Spring
    def excludeSpringBootStarterLogging = { 
        exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging')
        exclude(group: 'ch.qos.logback')
    }
    implementation('org.springframework.boot:spring-boot-starter', excludeSpringBootStarterLogging)
    implementation('org.springframework.boot:spring-boot-starter-web', excludeSpringBootStarterLogging)
    implementation('org.springframework.boot:spring-boot-starter-log4j2', excludeSpringBootStarterLogging)
    implementation('org.springframework.boot:spring-boot-starter-actuator', excludeSpringBootStarterLogging)
    implementation('org.springframework.cloud:spring-cloud-starter-config', excludeSpringBootStarterLogging)
    implementation('org.springframework.cloud:spring-cloud-starter-consul-all') {
        exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging')
        exclude(group: 'ch.qos.logback')
    }
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon', excludeSpringBootStarterLogging)
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth', excludeSpringBootStarterLogging)
    implementation('org.springframework.cloud:spring-cloud-starter-zipkin', excludeSpringBootStarterLogging)

    implementation('io.github.resilience4j:resilience4j-spring-boot2:1.2.0', excludeSpringBootStarterLogging)
    implementation('io.github.resilience4j:resilience4j-timelimiter:1.2.0', excludeSpringBootStarterLogging)
    implementation('io.micrometer:micrometer-registry-prometheus:1.1.5')

    implementation('org.glassfish.jersey.core:jersey-client:2.27')
    implementation('org.glassfish.jersey.inject:jersey-hk2:2.27')

    runtimeOnly('com.google.code.gson:gson:2.8.5')
    runtimeOnly('com.fasterxml.jackson.core:jackson-databind:2.9.6')
    runtimeOnly('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.6')
}

run {   
    systemProperties['sun.net.http.allowRestrictedHeaders'] = 'true'
}